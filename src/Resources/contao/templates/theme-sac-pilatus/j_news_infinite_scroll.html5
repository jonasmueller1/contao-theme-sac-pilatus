<script src="https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js"></script>
<script>


    (function ($) {
        $(document).ready(function () {

            // Global grid container element
            var $grid = null;
            var masonryOptions = {
                horizontalOrder: true,
                itemSelector: '.news_card',
                columnWidth: '.grid-sizer',
                percentPosition: true
            };


            /**
             * Generate the ContaoNewsInfiniteScroll object
             * requires news_infinite_scroll.js
             * @type {ContaoNewsInfiniteScroll}
             */
            var contaoNewsInfiniteScroll = new ContaoNewsInfiniteScroll({
                // CSS selector: Append loaded items to this container
                newsContainer: '.mod_newslist_infinite_scroll',
                // CSS selector: Default to $(window)
                scrollContainer: $(window),
                // CSS selector: Pagination next  (<ul class="pagination"><li class="next"><a href="newslist.html?page_n343=2" class="next" title="Gehe zu Seite 2">Vorw√§rts</a></li></ul>)
                paginationNextLink: '.pagination > .next > a.next',
                // CSS selector: Pagination last  (<ul class="pagination"><li class="last"><a href="newslist.html?page_n343=44" class="last" title="Gehe zu Seite 44">Ende</a></li></ul>)
                paginationLastLink: '.pagination > .last > a.last',
                // Pagination url regex pattern
                paginationUrlRegexPattern: 'page_n(\\d*)=(\\d*)',
                // When set to true, this will disable infinite scrolling and start firing ajax requests on domready with an interval of 3s
                loadAllOnDomready: false,
                // Use a "load more button" (Preserve the accessibility of the footer)
                // !!!! Important Set loadMoreButton to false, if you want to autoload items
                loadMoreButton: true,
                // Load more button
                loadMoreButtonMarkup: '<div class="mt-2 inf-scr-load-more-btn-container text-center"><button class="btn btn-primary w-100"><?= $GLOBALS["TL_LANG"]["MSC"]["infScrLoadMore"] ?></button></div>',
                // CSS selector: When you scroll and the window has reached the anchor point, requests will start
                anchorPoint: '.mod_newslist_infinite_scroll',
                // Distance in px from the top of the anchorPoint
                bottomPixels: 100,
                // Integer: Fading time for loades news items
                fadeInTime: 400,
                // HTML: Show this message during the loading process
                loadingInProcessContainer: '<div class="inf-scr-loading-in-process-container mt-4 text-center"><i class="fal fa-5x fa-spinner fa-spin"></i>{{br}}{{br}}<?= $GLOBALS["TL_LANG"]["MSC"]["infScrLoadingInProcess"] ?>...</em></div>',


                // Callbacks
                /**
                 *
                 * @param instance
                 * @return bool
                 */
                onInitialize: function (instance) {

                    $grid = $(instance.getOption('newsContainer'));

                    // Hide pagination
                    $(instance.getOption('newsContainer')).find('.pagination').closest('.block').each(function (el) {
                        $(this).hide();
                    });

                    var i = 0;
                    $(instance.getOption('newsContainer') + ' .card').each(function (el) {
                        i++;
                        $(this).closest('.news_card').addClass('added-to-masonry-grid');
                    });

                    // Add empty grid-sizer element for masonry layout
                    //$('<div class="grid-sizer col-sm-6 col-lg-3">').prependTo('.mod_newslist_infinite_scroll');
                    //$grid.masonry(masonryOptions);

                    // Return false to abort initialization
                    return true;
                },

                /**
                 *
                 * @param instance
                 */
                onXHRStart: function (instance) {
                    // Do some actions
                },

                /**
                 *
                 * @param html
                 * @param instance
                 * @returns string
                 */
                onXHRComplete: function (html, instance) {
                    // Do some actions
                    return html;
                },

                /**
                 *
                 * @param instance
                 */
                onXHRFail: function (instance) {
                    console.log('No response from server with address: ' + instance.currentUrl);
                },

                /**
                 *
                 * @param instance
                 */
                onAppendCallback: function (instance) {

                    var i = 0;

                    // Remove pagination
                    $(instance.getOption('newsContainer')).find('.pagination').closest('.block').each(function (el) {
                        $(this).remove();
                    });

                    $(instance.getOption('newsContainer') + ' .card .item-number').remove();

                    // Find new elements
                    /**
                    var newElements = $(instance.getOption('newsContainer')).find('.news_card:not(.added-to-masonry-grid)');
                    $grid.append(newElements).masonry('appended', newElements);
                    $(newElements).addClass('.added-to-masonry-grid').show();
                    //$grid.masonry('destroy');
                    $grid.masonry('reloadItems');
                    $grid.masonry('layout');
                     */



                }
            });
        });
    }(jQuery));
</script>
