<script src="https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js"></script>
<script>
    (function ($) {
        $(document).ready(function () {

            // Global grid container element
            var $grid = $('.mod_newslist_infinite_scroll');

            /**
             * Generate the ContaoNewsInfiniteScroll object
             * requires news_infinite_scroll.js
             * @type {ContaoNewsInfiniteScroll}
             */
            var contaoNewsInfiniteScroll = new ContaoNewsInfiniteScroll({
                // CSS selector: Append loaded items to this container
                newsContainer: '.mod_newslist_infinite_scroll',
                // CSS selector: Default to $(window)
                scrollContainer: $(window),
                // CSS selector: Pagination links (<a href="infinite?page_n193=5" class="link page-link" title="Gehe zu Seite 5">5</a>)
                paginationLinks: '.pagination .link',
                // When set to true, this will disable infinite scrolling and start firing ajax requests on domready with an interval of 3s
                loadAllOnDomready: false,
                // Use a "load more button" (Preserve the accessibility of the footer)
                // !!!! Important Set loadMoreButton to false, if you want to autoload items
                loadMoreButton: true,
                // Load more button
                loadMoreButtonMarkup: '<div class="mt-2 inf-scr-load-more-btn-container text-center"><button class="btn btn-primary w-100"><?= $GLOBALS["TL_LANG"]["MSC"]["infScrLoadMore"] ?></button></div>',
                // CSS selector: When you scroll and the window has reached the anchor point, requests will start
                anchorPoint: '.mod_newslist_infinite_scroll',
                // Distance in px from the top of the anchorPoint
                bottomPixels: 100,
                // Integer: Fading time for loades news items
                fadeInTime: 400,
                // HTML: Show this message during the loading process
                loadingInProcessContainer: '<div class="inf-scr-loading-in-process-container text-center"><i class="fal fa-5x fa-spinner fa-spin"></i>{{br}}{{br}}<?= $GLOBALS["TL_LANG"]["MSC"]["infScrLoadingInProcess"] ?>...</em></div>',


                // Callbacks
                /**
                 *
                 * @param instance
                 * @return bool
                 */
                onInitialize: function (instance) {

                    // Add empty grid-sizer element
                    $('<div class="grid-sizer col-sm-6 col-lg-3">').prependTo('.mod_newslist_infinite_scroll');

                    $('.mod_newslist_infinite_scroll .pagination').parent('').children().hide();
                    $('.mod_newslist_infinite_scroll .pagination').hide();


                    var i = 0;
                    $('.mod_newslist_infinite_scroll .card').each(function (el) {
                        i++;
                        //$('<span class="item-number">#' + i + '</span>').prependTo($(this));
                        $(this).closest('.news_card').addClass('added-to-masonry-grid');
                    });

                    $grid.masonry({
                        horizontalOrder: true,
                        itemSelector: '.news_card',
                        columnWidth: '.grid-sizer',
                        percentPosition: true
                    });

                    // Return false to abort initialization
                    return true;
                },

                /**
                 *
                 * @param instance
                 */
                onXHRStart: function (instance) {
                    // Do some actions
                },

                /**
                 *
                 * @param html
                 * @param instance
                 * @returns string
                 */
                onXHRComplete: function (html, instance) {
                    // Do some actions
                    return html;
                },

                /**
                 *
                 * @param instance
                 */
                onXHRFail: function (instance) {
                    console.log('No response from server with address: ' + instance.currentUrl);
                },

                /**
                 *
                 * @param instance
                 */
                onAppendCallback: function (instance) {

                    var i = 0;
                    $('.mod_newslist_infinite_scroll .card .item-number').remove();
                    $('.mod_newslist_infinite_scroll .card').each(function (el) {
                        i++;
                        //$('<span class="item-number">#' + i + '</span>').prependTo($(this));
                    });

                    // Find new elements
                    var $newElements = $('.mod_newslist_infinite_scroll .news_card:not(.added-to-masonry-grid)');

                    // Append new elements to the masonry grid
                    $grid.append($newElements).masonry('appended', $newElements);
                    $('.mod_newslist_infinite_scroll .news_card').addClass('added-to-masonry-grid');

                }
            });
        });
    }(jQuery));
</script>
