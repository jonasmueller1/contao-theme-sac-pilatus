<script src="bundles/markocupiccontaothemesacpilatus/js/masonry/masonry.js"></script>
<script src="bundles/markocupiccontaonewsinfinitescroll/js/contao_infinite_scroll.min.js?t={{ date().timestamp }}"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {

        const infiniteScrollNewsModuleSelector = '.mod_newslist_infinite_scroll > .infinite_scroll_newslist_container';

        for (const listItemContainer of document.querySelectorAll(infiniteScrollNewsModuleSelector)) {
            {# Masonry: -#}
            let masonryGrid = null;
            let masonryInstance = null;

            const masonryOptions = {
                horizontalOrder: true,
                itemSelector: '.news_card',
                columnWidth: '.grid-sizer',
                percentPosition: true,
            };

            /**
             * @type {ContaoInfiniteScrollApp}
             */
            const app = new ContaoInfiniteScrollApp(listItemContainer, {
                loadingMode: ContaoInfiniteScroll.Modes.LOAD_MORE_BUTTON,

                {#
                // DOM element: Element|null
                // Set the scroll container to null (default) if you want to use the whole scren as scroll area
                // Use document.querySelector('#scrollArea') if you prefer a custom scroll area
                scrollContainer: null,

                // The urls are retrieved from the pagination. Specify the css selectors from the pagination inside container
                pagination: {
                    selectorNext: '.pagination > .next > a.next[href]',
                    selectorLast: '.pagination > .last > a.last[href]',
                    paramPageRegex: 'page([_a-z]*)(\d*)',
                }
                -#}

                // Load more button markup
                loadMoreButtonMarkup: '<div class="mt-4 inf-scr-load-more-btn-container text-center"><span class="btn btn-primary w-100" role="button" tabindex="1">{{ "MSC.infScrLoadMore"|trans([], "contao_default") }}</span></div>',

                // Loading in process indicator markup
                loadingInProcessIndicatorMarkup: '<div class="inf-scr-loading-in-process-container mt-4 pt-4 text-center text-muted"><i class="fas fa-5x text-light fa-rotate fa-spin"></i><br><br>{{ "MSC.infScrLoadingInProcess"|trans([], "contao_default") }}</em></div>',
            });

            app.on('contao.infinite_scroll.initialize', (instance) => {
                {#  Hide pagination -#}
                for (const elPag of instance.getContainer().querySelectorAll('nav.block:has(.pagination)')) {
                    elPag.style.display = 'none';
                }

                {#  Masonry -#}
                masonryGrid = instance.getContainer();

                for (const card of instance.getContainer().querySelectorAll('.card')) {
                    card.closest('.news_card').setAttribute('data-masonryinit', 'true');
                }

                {# Add empty grid-sizer element for masonry layout -#}
                const elGridSizer = document.createElement('div');
                elGridSizer.classList.add(...['grid-sizer', 'col-12', 'col-md-4']);
                instance.getContainer().prepend(elGridSizer);

                masonryInstance = new Masonry(masonryGrid, masonryOptions);

                {# Return false will abort the initialization -#}
                return true;
            });

            {#
            app.on('contao.infinite_scroll.xhr_start', (instance, currentUrl) => {
                // Do something
            });
            -#}

            {#
            app.on('contao.infinite_scroll.xhr_complete', (instance, responseText) => {
                // Do something and return the html markup
                return responseText;
            });
            -#}

            {#
            app.on('contao.infinite_scroll.append', (instance, documentFragment) => {
                // Do something
                return documentFragment;
            });
            -#}

            app.on('contao.infinite_scroll.appended', async (instance) => {

                // Append freshly items to the masonry grid
                await new Promise(resolve => {
                    setTimeout(() => {
                            resolve();
                        }, 1
                    );
                });

                // Masonry: Remove the masonry item number elements
                for (const elItemNum of instance.getContainer().querySelectorAll('.card .item-number')) {
                    elItemNum.remove();
                }

                // Find freshly loaded elements
                const newElements = instance.getContainer().querySelectorAll('.news_card:not([data-masonryinit])');

                // Append new elements to the masonry grid
                for (const newElement of newElements) {
                    newElement.setAttribute('data-masonryinit', 'true');
                    masonryGrid.appendChild(newElement);
                    masonryInstance.appended(newElement);
                }

            });

            app.execute();
        }
    });

</script>
